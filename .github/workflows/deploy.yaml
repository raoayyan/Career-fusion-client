name: Deploy Pull Request to EC2

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'The number of the pull request'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
     
      - name: Verify Pull Request Number
        uses: actions/github-script@v5
        id: verify_pr_number
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const response = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.inputs.PR_number }}
            });
            
            // Check if the pull request is open
            if (response.data.number !== ${{ github.event.inputs.PR_number }}) {
              throw new Error('Pull request is not open or number is not valid!');
            } else {
              console.log("PR ref: " + response.data.head.ref);
              return response.data.head.ref;
            }
        # Checkout the repository for Terraform files
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform and Get IP
        id: apply
        run: |
          terraform apply -auto-approve
          # Redirect only stdout to the file, ignoring debug output which goes to stderr
          terraform output -raw ec2_ip 2>/dev/null > ip.txt
          # Clean the file of any potential debug lines
          sed -i '/::debug::/d' ip.txt
          # Read the cleaned IP and set it as output
          echo "ec2_ip=$(cat ip.txt | tr -d '\n')" >> "$GITHUB_OUTPUT"
      
      - name: Verify IP
        run: |
          echo "IP from file:"
          cat ip.txt
          echo "IP from output: ${{ steps.apply.outputs.stdout }}"

      # Wait for instance to be ready
      - name: Wait for instance
        run: sleep 60  # Adjust time as needed
        
       # ======================================================
       # Checkout the PR branch so that we can deploy it
       # ======================================================
      - uses: actions/checkout@v2
        name: 'Checkout PR branch'
        with:
          ref: ${{ steps.verify_pr_number.outputs.result }}
      # Deploy using rsync
      - name: Deploy to EC2
        uses: burnett01/rsync-deployments@5.2.1
        with:
          switches: -avzr --delete
          path: ./*
          remote_path: /home/ubuntu/app
          remote_host: ${{ steps.apply.outputs.ec2_ip }}
          remote_user: ubuntu
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Execute commands on EC2
      - name: Setup and Start Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.apply.outputs.ec2_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/app
            npm install
            # Start or restart the application
            npm start

      - name: Comment on PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr comment ${{ github.event.inputs.pr_number }} \
            --body "Deployment completed! Access the app at http://${{ env.EC2_IP }}"

  cleanup:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event.pull_request.closed == true
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - run: |
          terraform init
          terraform destroy -auto-approve